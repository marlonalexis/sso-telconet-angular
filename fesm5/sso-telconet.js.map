{"version":3,"file":"sso-telconet.js","sources":["ng://sso-telconet/src/app/_service/storage.service.ts","ng://sso-telconet/src/app/_service/secure-session-cas.service.ts","ng://sso-telconet/src/environments/environment.ts","ng://sso-telconet/src/app/_service/sso.service.ts","ng://sso-telconet/src/app/_request/accounting-sso-req.ts","ng://sso-telconet/src/app/_guard/sso.guard.ts","ng://sso-telconet/src/app/_interceptor/sso.interceptor.ts","ng://sso-telconet/src/app/_model/user-sso.ts","ng://sso-telconet/src/app/_request/autorizacion-sso-req.ts","ng://sso-telconet/src/app/_response/autorizacion-sso-res.ts","ng://sso-telconet/src/app/sso-check/sso-check.component.ts","ng://sso-telconet/src/app/sso.routing.module.ts","ng://sso-telconet/src/app/sso.module.ts","ng://sso-telconet/sso-telconet.ts"],"sourcesContent":["import * as CryptoJS from 'crypto-js';\nimport {Injectable} from '@angular/core';\n\nconst SecureStorage = require('secure-web-storage');\nconst SECRET_KEY = 'T3lc0n3tC@sM@rL0n';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StorageService {\n  constructor() {\n  }\n\n  public secureStorage = new SecureStorage(localStorage, {\n    hash: function hash(key) {\n      key = CryptoJS.SHA256(key, SECRET_KEY);\n      return key.toString();\n    }, encrypt: function encrypt(data) {\n      data = CryptoJS.AES.encrypt(data, SECRET_KEY);\n      data = data.toString();\n      return data;\n    }, decrypt: function decrypt(data) {\n      data = CryptoJS.AES.decrypt(data, SECRET_KEY);\n      data = data.toString(CryptoJS.enc.Utf8);\n      return data;\n    }\n  });\n}\n","import {Injectable} from '@angular/core';\nimport {StorageService} from './storage.service';\nimport {UserSSO} from '../_model/user-sso';\nimport {CookieService} from 'ngx-cookie-service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SecureSessionCasService {\n  constructor(private storageService: StorageService, private cookieService: CookieService) {\n  }\n\n  ssoSessionCok = 'SSO_SESSIONID';\n  key: string = 'userSSO';\n\n  setSession(value: string) {\n    this.storageService.secureStorage.setItem(this.key, value);\n  }\n\n  getSession(): UserSSO {\n    try {\n      return JSON.parse(this.storageService.secureStorage.getItem(this.key));\n    } catch (error) {\n      return null;\n    }\n  }\n\n  clearSession() {\n    this.storageService.secureStorage.clear();\n  }\n\n  getSsoSessionId() {\n    return this.cookieService.get(this.ssoSessionCok);\n  }\n\n  setSsoSessionId(value: string) {\n    this.cookieService.set(this.ssoSessionCok, value, null, '/');\n  }\n\n  /**\n   * Verifica si existe usuario autenticado\n   * @autor Marlon Plúas <mpluas@telconet.ec>\n   * @version 1.0\n   */\n  validateAuthSso() {\n    return !!(this.getSession() && this.getSsoSessionId());\n  }\n}\n","export const environment = {\n  production: false,\n  casServer: 'https://sso.telconet.ec/cas',\n  casServiceTarget: 'http://localhost:4200/',\n  casServiceCheck: 'sso/check',\n  casGatewayAutorizacion: 'http://gw-cas.telconet.ec:9000/gateway/autorizacion',\n  casGatewayAccounting: 'http://gw-cas.telconet.ec:9000/check_sso',\n};\n","import {Injectable} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {AutorizacionSsoReq} from '../_request/autorizacion-sso-req';\nimport {AutorizacionSsoRes} from '../_response/autorizacion-sso-res';\nimport {SecureSessionCasService} from './secure-session-cas.service';\nimport {AccountingSsoReq} from '../_request/accounting-sso-req';\nimport {environment} from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SsoService {\n  casServerLogin = environment.casServer.concat('/login');\n  casServiceTarget = environment.casServiceTarget;\n  casServicePath = environment.casServiceTarget.concat(environment.casServiceCheck);\n  casValidateUrl = environment.casServer.concat('/p3/serviceValidate');\n  casGatewayAutorizacion = environment.casGatewayAutorizacion;\n  casGatewayAccounting = environment.casGatewayAccounting;\n\n  private httpHeaders = new HttpHeaders({\n    'sso': 'true'\n  });\n\n  constructor(private router: Router, private http: HttpClient, private secureStorage: SecureSessionCasService) {\n  }\n\n  /**\n   * Redirige al cas server\n   * @autor Marlon Plúas <mpluas@telconet.ec>\n   * @version 1.0\n   */\n  goToCAS() {\n    this.removeData();\n    const casUrlLogin = this.casServerLogin.concat('?service=' + this.casServicePath);\n    this.redirect(casUrlLogin);\n  }\n\n  /**\n   * Limpia datos de sesión existente\n   * @autor Marlon Plúas <mpluas@telconet.ec>\n   * @version 1.0\n   */\n  removeData() {\n    this.secureStorage.clearSession();\n  }\n\n  /**\n   * Valida el ticket recibido por cas server\n   * @autor Marlon Plúas <mpluas@telconet.ec>\n   * @version 1.0\n   *\n   * @param ticket\n   */\n  validateTicket(ticket: String) {\n    const casValidateTicket = this.casValidateUrl.concat('?service=' + this.casServicePath + '&ticket=' + ticket);\n    return this.http.get(casValidateTicket, {headers: this.httpHeaders, responseType: 'text'});\n  }\n\n  /**\n   * Valida si el usuario tiene autorización\n   * @autor Marlon Plúas <mpluas@telconet.ec>\n   * @version 1.0\n   *\n   * @param request\n   */\n  autorizacionSso(request: AutorizacionSsoReq) {\n    return this.http.post<AutorizacionSsoRes>(this.casGatewayAutorizacion, request, {headers: this.httpHeaders});\n  }\n\n  /**\n   * Método para redirigir a una pagina externa\n   * @autor Marlon Plúas <mpluas@telconet.ec>\n   * @version 1.0\n   *\n   * @param {string} url\n   * @param {string} target\n   * @returns {Promise<boolean>}\n   */\n  private redirect(url: string, target: string = '_parent'): Promise<boolean> {\n    return new Promise<boolean>((resolve, reject) => {\n      try {\n        resolve(!!window.open(url, target));\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  accounting(request: AccountingSsoReq) {\n    return this.http.post<any>(this.casGatewayAccounting, request, {headers: this.httpHeaders});\n  }\n}\n","export class AccountingSsoReq {\n\tssoSession: string;\n\trequestService: string;\n\tpath: string;\n\tipCliente: string;\n}\n","import {Injectable} from '@angular/core';\nimport {\n  CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, CanLoad, Route, UrlSegment, CanActivateChild\n} from '@angular/router';\nimport {SsoService} from '../_service/sso.service';\nimport {SecureSessionCasService} from '../_service/secure-session-cas.service';\nimport {AccountingSsoReq} from '../_request/accounting-sso-req';\nimport {environment} from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SsoGuard implements CanActivate, CanLoad, CanActivateChild {\n  constructor(private ssoService: SsoService, private secureStorage: SecureSessionCasService) {\n  }\n\n  casServiceTarget = environment.casServiceTarget;\n  accountingReq: AccountingSsoReq = new AccountingSsoReq();\n\n  canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    if (this.secureStorage.validateAuthSso() && this.checkSessionCanActivate(state)) {\n      return true;\n    }\n    // Si no existe user logeado se redirige al cas\n    this.ssoService.goToCAS();\n    return false;\n  }\n\n  canLoad(route: Route, segments: UrlSegment[]): boolean {\n    if (this.secureStorage.validateAuthSso() && this.checkSessionCanLoad(route)) {\n      return true;\n    }\n    // Si no existe user logeado se redirige al cas\n    this.ssoService.goToCAS();\n    return false;\n  }\n\n  private checkSessionCanLoad(route: Route) {\n    this.accountingReq.ssoSession = this.secureStorage.getSsoSessionId();\n    this.accountingReq.requestService = '/' + route.path;\n    this.accountingReq.path = this.casServiceTarget;\n    this.accountingReq.ipCliente = '127.0.0.1';\n    this.ssoService.accounting(this.accountingReq).subscribe(respose => {\n      if (respose == null) {\n        // Redirect al cas\n        this.ssoService.goToCAS();\n      }\n    });\n    return true;\n  }\n\n  private checkSessionCanActivate(route: RouterStateSnapshot) {\n    this.accountingReq.ssoSession = this.secureStorage.getSsoSessionId();\n    this.accountingReq.requestService = route.url;\n    this.accountingReq.path = this.casServiceTarget;\n    this.accountingReq.ipCliente = '127.0.0.1';\n    this.ssoService.accounting(this.accountingReq).subscribe(respose => {\n      if (respose == null) {\n        // Redirect al cas\n        this.ssoService.goToCAS();\n      }\n    });\n    return true;\n  }\n\n  canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    if (this.secureStorage.validateAuthSso() && this.checkSessionCanActivateChild(state)) {\n      return true;\n    }\n    // Si no existe user logeado se redirige al cas\n    this.ssoService.goToCAS();\n    return false;\n  }\n\n  private checkSessionCanActivateChild(route: RouterStateSnapshot) {\n    this.accountingReq.ssoSession = this.secureStorage.getSsoSessionId();\n    this.accountingReq.requestService = route.url;\n    this.accountingReq.path = this.casServiceTarget;\n    this.accountingReq.ipCliente = '127.0.0.1';\n    this.ssoService.accounting(this.accountingReq).subscribe(respose => {\n      if (respose == null) {\n        // Redirect al cas\n        this.ssoService.goToCAS();\n      }\n    });\n    return true;\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {\n  HttpRequest, HttpHandler, HttpEvent, HttpInterceptor\n} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {SecureSessionCasService} from '../_service/secure-session-cas.service';\nimport {AccountingSsoReq} from '../_request/accounting-sso-req';\nimport {SsoService} from '../_service/sso.service';\nimport {environment} from '../../environments/environment';\n\n@Injectable()\nexport class SsoInterceptor implements HttpInterceptor {\n  casServiceTarget = environment.casServiceTarget;\n  accountingReq: AccountingSsoReq = new AccountingSsoReq();\n\n  constructor(private secureStorage: SecureSessionCasService, private ssoService: SsoService) {\n  }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    if (request.headers.get('sso') !== 'true' || !request.headers.get('sso')) {\n      let parametrosPost = '';\n      if (request.method === 'POST') {\n        parametrosPost = '_ParametrosPost(' + JSON.stringify(request.body) + ')';\n      }\n      this.accountingReq.ssoSession = this.secureStorage.getSsoSessionId();\n      this.accountingReq.requestService = request.url.concat(parametrosPost);\n      this.accountingReq.path = this.casServiceTarget;\n      this.accountingReq.ipCliente = '127.0.0.1';\n      this.ssoService.accounting(this.accountingReq).subscribe(respose => {\n        if (respose == null) {\n          // Redirect al cas\n          this.ssoService.goToCAS();\n        }\n      });\n    }\n    return next.handle(request);\n  }\n}\n","export class UserSSO {\n\tusername: string;\n\tcedula: string;\n\tnombreCompleto: string;\n\tcorreo: string;\n\tcargo: string;\n\tnombres: string;\n\tapellidos: string;\n\tuidLdap: string;\n}\n","export class AutorizacionSsoReq {\n\tuserLogin: string;\n\tserviceTarget: string;\n\tipCliente: string;\n\tserviceTicket: string;\n}\n","export class AutorizacionSsoRes {\n  casSesionId: string;\n  codError: string;\n  roles: string[];\n}\n","import {Component, OnInit} from '@angular/core';\nimport {NgxSpinnerService} from 'ngx-spinner';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {SsoService} from '../_service/sso.service';\nimport * as xml2js from 'xml2js';\nimport {UserSSO} from '../_model/user-sso';\nimport {AutorizacionSsoReq} from '../_request/autorizacion-sso-req';\nimport {SecureSessionCasService} from '../_service/secure-session-cas.service';\nimport {environment} from '../../environments/environment';\n\n@Component({\n  selector: 'app-sso-check',\n  template: `\n    <ngx-spinner bdColor=\"rgba(51,51,51,0.8)\" size=\"large\" color=\"#fff\" type=\"ball-atom\" [fullScreen]=\"true\"></ngx-spinner>\n  `, styles: ['']\n})\nexport class SsoCheckComponent implements OnInit {\n  userSSO: UserSSO = new UserSSO();\n  autorizacionReq: AutorizacionSsoReq = new AutorizacionSsoReq();\n  casServiceTarget = environment.casServiceTarget;\n  ticket: string;\n\n  constructor(private route: ActivatedRoute,\n              private router: Router,\n              private ssoService: SsoService,\n              private spinnerService: NgxSpinnerService,\n              private secureStorage: SecureSessionCasService) {\n    this.route.queryParams.subscribe(params => {\n      this.ticket = params.ticket;\n    });\n  }\n\n  ngOnInit(): void {\n    this.spinner();\n    this.validarTicket();\n  }\n\n  spinner() {\n    this.spinnerService.show();\n  }\n\n  /**\n   * Método que valida el ticket SSO\n   * @autor Marlon Plúas <mpluas@telconet.ec>\n   * @version 1.0\n   */\n  validarTicket() {\n    if (this.secureStorage.validateAuthSso()) {\n      this.router.navigate(['/']);\n    } else {\n      this.ssoService.validateTicket(this.ticket).subscribe(response => {\n        response = response.replace(/cas:/g, '');\n        let res;\n        xml2js.parseString(response, (error, result) => {\n          res = result.serviceResponse;\n        });\n        if (res.authenticationFailure) {\n          this.ssoService.goToCAS();\n        } else {\n          this.userSSO.username = res.authenticationSuccess[0].user[0];\n          this.userSSO.cedula = res.authenticationSuccess[0].attributes[0].cedula[0];\n          this.userSSO.nombreCompleto = res.authenticationSuccess[0].attributes[0].displayName[0];\n          this.userSSO.correo = res.authenticationSuccess[0].attributes[0].mail[0];\n          this.userSSO.nombres = res.authenticationSuccess[0].attributes[0].cn[0];\n          this.userSSO.apellidos = res.authenticationSuccess[0].attributes[0].sn[0];\n          this.userSSO.cargo = res.authenticationSuccess[0].attributes[0].cargo[0];\n          this.userSSO.uidLdap = res.authenticationSuccess[0].attributes[0].uidNumber[0];\n          this.secureStorage.setSession(JSON.stringify(this.userSSO));\n          this.autorizacionReq.userLogin = this.userSSO.username;\n          this.autorizacionReq.serviceTarget = this.casServiceTarget;\n          this.autorizacionReq.ipCliente = '127.0.0.1';\n          this.autorizacionReq.serviceTicket = this.ticket;\n          this.ssoService.autorizacionSso(this.autorizacionReq).subscribe(response => {\n            if (!response || response.codError != null) {\n              this.ssoService.removeData();\n              alert('Existe un problema de conexión, Por favor comunicarse con el Departamento de Sistemas.');\n            } else {\n              this.secureStorage.setSsoSessionId(response.casSesionId);\n            }\n            this.router.navigate(['/']);\n          });\n        }\n      });\n    }\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {Routes, RouterModule} from '@angular/router';\nimport {SsoCheckComponent} from './sso-check/sso-check.component';\n\nconst routes: Routes = [\n  {path: 'sso/check', component: SsoCheckComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class SsoRoutingModule {\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {SsoRoutingModule} from './sso.routing.module';\nimport {SsoCheckComponent} from './sso-check/sso-check.component';\nimport {CookieService} from 'ngx-cookie-service';\nimport {NgxSpinnerModule} from 'ngx-spinner';\n\n@NgModule({\n  declarations: [SsoCheckComponent], imports: [\n    CommonModule, SsoRoutingModule, NgxSpinnerModule\n  ], providers: [CookieService]\n})\nexport class SsoModule {\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["SecureStorage","CryptoJS.SHA256","CryptoJS.AES","CryptoJS.enc","xml2js.parseString"],"mappings":"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"}